<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mortgage Calculator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Container & Card */
        .container {
            max-width: 1200px;
            margin: auto;
            background: #f8f9fa; /* Slightly off-white background for a subtle contrast */
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            padding: 20px;
            overflow: hidden;
        }
    
        /* Highlighted Row */
        .highlight-row {
            background-color: #e0f7ff; /* Light blue background */
            font-weight: bold;
            color: #007bff; /* Blue text color */
        }
    
        /* Total Mortgage Highlight */
        .total-mortgage-row .row-label,
        .total-mortgage-row .grid-item {
            background-color: #e0f7ff; /* Light blue background for entire row */
            font-weight: bold;
            color: #007bff; /* Blue text color */
        }
    
        /* Mortgage Payment Highlight */
        .mortgage-payment-row .row-label,
        .mortgage-payment-row .grid-item {
            background-color: #d1ecf1; /* Slightly different blue background for variety */
            font-weight: bold;
            color: #007bff; /* Blue text color */
        }
    
        .header {
            display: grid;
            grid-template-columns: 1fr 1fr 2fr 3fr; /* Adjust the proportions as needed */
            margin-bottom: 20px;
            gap: 15px;
        }
    
        .header span {
            grid-column: 1 / span 1; /* Span across the first column */
            display: flex;
            align-items: center;
            font-weight: bold; /* Add bold to make it stand out */
            color: #495057; /* Slightly darker gray */
        }
    
        .header input#price {
            grid-column: 2 / span 2; /* Span across the second and third columns */
        }
    
        .header input[placeholder="Location"] {
            grid-column: 4 / span 2; /* Span across the fourth and fifth columns */
        }
    
        .header input {
            border-radius: 8px; /* Slightly rounded corners */
            border: 1px solid #ced4da; /* Light gray border for subtle definition */
            padding: 10px; /* Add padding for a larger input area */
            width: 100%; /* Make the input take the full width of its container */
            box-sizing: border-box; /* Ensures padding is included in the width */
            background-color: #fff; /* Ensure a clean white background */
            font-size: 1rem; /* Increase font size for readability */
            transition: border-color 0.3s ease; /* Smooth transition for border color */
        }
    
        .header input:focus {
            border-color: #007bff; /* Blue border on focus */
            outline: none; /* Remove the default outline */
        }
    
        .row-label {
            font-weight: bold;
            padding-right: 10px;
            text-align: center; /* Center the text horizontally */
            display: flex;
            align-items: center;
            justify-content: center; /* Center the text within the label */
            width: 150px; /* Fixed width for labels */
            margin: auto; /* Center the label container */
            color: #495057; /* Slightly darker gray */
        }
    
        .grid-container {
            display: grid;
            grid-template-columns: 150px repeat(4, 1fr); /* Adjusted to account for the label width */
            gap: 15px;
            margin-bottom: 20px;
        }
    
        .grid-item {
            background-color: #fff; /* White background */
            padding: 15px;
            border: 1px solid #ced4da; /* Light gray border */
            border-radius: 10px; /* Rounded corners for a softer look */
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05); /* Subtle shadow for depth */
            transition: box-shadow 0.3s ease; /* Smooth transition for hover effect */
        }
    
        .grid-item:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1); /* Slightly larger shadow on hover */
        }
    
        .grid-item input {
            width: 100%;
            border: none;
            background-color: #f8f9fa; /* Slightly off-white background */
            padding: 8px;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
            font-size: 1rem; /* Increase font size for readability */
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05); /* Subtle inset shadow for depth */
        }
    
        .down-payment-value {
            margin-top: 10px;
            padding: 10px;
            background-color: #e9ecef; /* Light gray background */
            border: 1px solid #ced4da; /* Light gray border */
            border-radius: 5px;
            font-weight: bold;
            font-size: 1rem; /* Increase font size for readability */
            color: #495057; /* Slightly darker gray */
        }
    
        .payment-result {
            background-color: #e0f7ff;
            padding: 15px;
            text-align: center;
            border-radius: 5px;
            font-weight: bold;
            color: #007bff;
            font-size: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
        }
    
    /* General input styling */
    input,
    select {
        appearance: none; /* Remove default styles */
        background-color: #fff;
        border: 1px solid #ced4da; /* Light gray border */
        border-radius: 8px; /* Rounded corners */
        padding: 8px 12px; /* Consistent padding */
        font-size: 1rem; /* Font size for readability */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); /* Subtle shadow for depth */
        transition: border-color 0.3s ease; /* Smooth transition for border color */
        width: 100%; /* Full width for better UI */
        height: 38px; /* Set a consistent height */
        line-height: 1.5; /* Consistent line height */
    }

    input:focus,
    select:focus {
        border-color: #007bff; /* Blue border on focus */
        outline: none; /* Remove the default outline */
    }

    /* Custom arrow for select fields */
    select {
        background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"%3E%3Cpath fill="%23007bff" d="M2 0L0 2h4z"/%3E%3C/svg%3E'); /* Small dropdown arrow */
        background-repeat: no-repeat;
        background-position: right 10px center; /* Position arrow on the right */
        background-size: 10px 10px; /* Size of the arrow */
    }

    /* Custom Scrollbar Styling for Dropdowns */
    select::-webkit-scrollbar {
        width: 10px; /* Set width of the scrollbar */
    }

    select::-webkit-scrollbar-track {
        background: #f1f1f1; /* Light gray background for the scrollbar track */
        border-radius: 8px; /* Rounded track */
    }

    select::-webkit-scrollbar-thumb {
        background-color: #007bff; /* Blue color for the scrollbar thumb */
        border-radius: 8px; /* Rounded thumb */
        border: 2px solid #f1f1f1; /* Border around the thumb */
    }

    select::-webkit-scrollbar-thumb:hover {
        background-color: #0056b3; /* Darker blue on hover */
    }

        /* Heading Styles */
        .calculator-heading {
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            color: #007bff; /* Blue text color to match theme */
            margin-bottom: 20px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle text shadow for depth */
        }
    
        .error-message {
            color: red;
            font-size: 0.9em; /* Smaller font size */
            margin-top: 5px; /* Slight margin to separate from the input field */
        }

        .cash-close-section {
            padding: 20px;
        }

        .cash-close-section label {
            font-weight: bold;
            color: #495057;
        }

        .cash-close-section input[type="number"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            background-color: #fff;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .cash-close-section input[type="number"]:focus {
            border-color: #007bff;
            outline: none;
        }

        .cash-close-section .total {
            font-size: 1.5rem;
            font-weight: bold;
            color: #007bff;
            text-align: right;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #ced4da;
        }

        .form-select {
            border-radius: 5px;
            padding: 5px;
            width: 100%;
            border: 1px solid #ced4da;
        }

        .down-payment-options {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn-group button {
            border: 1px solid #ced4da;
            border-radius: 5px;
            background-color: #f8f9fa;
            padding: 10px 15px;
            font-size: 1rem;
            cursor: pointer;
        }

        .btn-group button.active {
            background-color: #007bff;
            color: #fff;
        }

        .total {
    font-size: 1.5rem;
    font-weight: bold;
    color: #007bff;
    text-align: right;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #ced4da;
}

.highlight {
    color: #007bff;
    font-weight: bold;
}

    
        @media (max-width: 768px) {
            .grid-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
    
</head>
<body>

    <!-- Heading -->
    <header class="calculator-heading">
        Mortgage Payment Calculator
    </header>
    <div class="container">
        <div class="header">
            <span>Start here ➔</span>
            
            <!-- Price input with label -->
            <div class="input-group" style="grid-column: 2 / 4;">
                <label for="price">Price</label>
                <input type="number" placeholder="Price" id="price" name="price" oninput="updateDownPayments()">
                <div id="error-message-price" class="error-message"></div> <!-- Error message container -->
            </div>
            
            <!-- Location input with label -->
            <div class="input-group" style="grid-column: 4 / 5;">
                <label for="location">Location</label>
                <input type="text" placeholder="Location" id="location" value="Toronto, ON" disabled>
            </div>
        </div>
        <hr>
    
        <!-- Down payment row -->
        <div class="grid-container">
            <div class="row-label">
                <b style="color: #007bff; padding-right: 3px;">-</b> Down payment
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="down_payment1" name="down_payment1" value="6.67" oninput="onMortgageCalculatorInputChange(); updateDownPaymentValues(1);">
                <div id="down_payment_value1" class="down-payment-value"></div>
                <div id="error-message1" class="error-message"></div> <!-- Error message container -->
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="down_payment2" name="down_payment2" value="10" oninput="onMortgageCalculatorInputChange(); updateDownPaymentValues(2);">
                <div id="down_payment_value2" class="down-payment-value"></div>
                <div id="error-message2" class="error-message"></div> <!-- Error message container -->
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="down_payment3" name="down_payment3" value="15" oninput="onMortgageCalculatorInputChange(); updateDownPaymentValues(3);">
                <div id="down_payment_value3" class="down-payment-value"></div>
                <div id="error-message3" class="error-message"></div> <!-- Error message container -->
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="down_payment4" name="down_payment4" value="20" oninput="onMortgageCalculatorInputChange(); updateDownPaymentValues(4);">
                <div id="down_payment_value4" class="down-payment-value"></div>
                <div id="error-message4" class="error-message"></div> <!-- Error message container -->
            </div>
        </div>
    
        <!-- CMHC insurance row -->
        <div class="grid-container">
            <div class="row-label"><b style="color: #007bff; padding-right: 3px;">+</b> CMHC Insurance</div>
            <div class="grid-item" id="result-cmhc1"></div>
            <div class="grid-item" id="result-cmhc2"></div>
            <div class="grid-item" id="result-cmhc3"></div>
            <div class="grid-item" id="result-cmhc4"></div>
        </div>
    
        <!-- Total mortgage row (highlighted) -->
        <div class="grid-container total-mortgage-row">
            <div class="row-label">Total mortgage</div>
            <div class="grid-item" id="result-total-mortgage1"></div>
            <div class="grid-item" id="result-total-mortgage2"></div>
            <div class="grid-item" id="result-total-mortgage3"></div>
            <div class="grid-item" id="result-total-mortgage4"></div>
        </div>
    
        <!-- Amortization row -->
        <div class="grid-container">
            <div class="row-label">Amortization</div>
            <div class="grid-item">
                <select id="amortization1" name="amortization1" onchange="calculateMortgage(1)">
                    <option value="1-Year">1-Year</option>
                    <option value="2-Year">2-Year</option>
                    <option value="3-Year">3-Year</option>
                    <option value="4-Year">4-Year</option>
                    <option value="5-Year">5-Year</option>
                    <option value="6-Year">6-Year</option>
                    <option value="7-Year">7-Year</option>
                    <option value="8-Year">8-Year</option>
                    <option value="9-Year">9-Year</option>
                    <option value="10-Year">10-Year</option>
                    <option value="11-Year">11-Year</option>
                    <option value="12-Year">12-Year</option>
                    <option value="13-Year">13-Year</option>
                    <option value="14-Year">14-Year</option>
                    <option value="15-Year">15-Year</option>
                    <option value="16-Year">16-Year</option>
                    <option value="17-Year">17-Year</option>
                    <option value="18-Year">18-Year</option>
                    <option value="19-Year">19-Year</option>
                    <option value="20-Year">20-Year</option>
                    <option value="21-Year">21-Year</option>
                    <option value="22-Year">22-Year</option>
                    <option value="23-Year">23-Year</option>
                    <option value="24-Year">24-Year</option>
                    <option value="25-Year" selected>25-Year</option>
                    <option value="26-Year">26-Year</option>
                    <option value="27-Year">27-Year</option>
                    <option value="28-Year">28-Year</option>
                    <option value="29-Year">29-Year</option>
                    <option value="30-Year">30-Year</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="amortization2" name="amortization2" onchange="calculateMortgage(2)">
                    <option value="1-Year">1-Year</option>
                    <option value="2-Year">2-Year</option>
                    <option value="3-Year">3-Year</option>
                    <option value="4-Year">4-Year</option>
                    <option value="5-Year">5-Year</option>
                    <option value="6-Year">6-Year</option>
                    <option value="7-Year">7-Year</option>
                    <option value="8-Year">8-Year</option>
                    <option value="9-Year">9-Year</option>
                    <option value="10-Year">10-Year</option>
                    <option value="11-Year">11-Year</option>
                    <option value="12-Year">12-Year</option>
                    <option value="13-Year">13-Year</option>
                    <option value="14-Year">14-Year</option>
                    <option value="15-Year">15-Year</option>
                    <option value="16-Year">16-Year</option>
                    <option value="17-Year">17-Year</option>
                    <option value="18-Year">18-Year</option>
                    <option value="19-Year">19-Year</option>
                    <option value="20-Year">20-Year</option>
                    <option value="21-Year">21-Year</option>
                    <option value="22-Year">22-Year</option>
                    <option value="23-Year">23-Year</option>
                    <option value="24-Year">24-Year</option>
                    <option value="25-Year" selected>25-Year</option>
                    <option value="26-Year">26-Year</option>
                    <option value="27-Year">27-Year</option>
                    <option value="28-Year">28-Year</option>
                    <option value="29-Year">29-Year</option>
                    <option value="30-Year">30-Year</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="amortization3" name="amortization3" onchange="calculateMortgage(3)">
                    <option value="1-Year">1-Year</option>
                    <option value="2-Year">2-Year</option>
                    <option value="3-Year">3-Year</option>
                    <option value="4-Year">4-Year</option>
                    <option value="5-Year">5-Year</option>
                    <option value="6-Year">6-Year</option>
                    <option value="7-Year">7-Year</option>
                    <option value="8-Year">8-Year</option>
                    <option value="9-Year">9-Year</option>
                    <option value="10-Year">10-Year</option>
                    <option value="11-Year">11-Year</option>
                    <option value="12-Year">12-Year</option>
                    <option value="13-Year">13-Year</option>
                    <option value="14-Year">14-Year</option>
                    <option value="15-Year">15-Year</option>
                    <option value="16-Year">16-Year</option>
                    <option value="17-Year">17-Year</option>
                    <option value="18-Year">18-Year</option>
                    <option value="19-Year">19-Year</option>
                    <option value="20-Year">20-Year</option>
                    <option value="21-Year">21-Year</option>
                    <option value="22-Year">22-Year</option>
                    <option value="23-Year">23-Year</option>
                    <option value="24-Year">24-Year</option>
                    <option value="25-Year" selected>25-Year</option>
                    <option value="26-Year">26-Year</option>
                    <option value="27-Year">27-Year</option>
                    <option value="28-Year">28-Year</option>
                    <option value="29-Year">29-Year</option>
                    <option value="30-Year">30-Year</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="amortization4" name="amortization4" onchange="calculateMortgage(4)">
                    <option value="1-Year">1-Year</option>
                    <option value="2-Year">2-Year</option>
                    <option value="3-Year">3-Year</option>
                    <option value="4-Year">4-Year</option>
                    <option value="5-Year">5-Year</option>
                    <option value="6-Year">6-Year</option>
                    <option value="7-Year">7-Year</option>
                    <option value="8-Year">8-Year</option>
                    <option value="9-Year">9-Year</option>
                    <option value="10-Year">10-Year</option>
                    <option value="11-Year">11-Year</option>
                    <option value="12-Year">12-Year</option>
                    <option value="13-Year">13-Year</option>
                    <option value="14-Year">14-Year</option>
                    <option value="15-Year">15-Year</option>
                    <option value="16-Year">16-Year</option>
                    <option value="17-Year">17-Year</option>
                    <option value="18-Year">18-Year</option>
                    <option value="19-Year">19-Year</option>
                    <option value="20-Year">20-Year</option>
                    <option value="21-Year">21-Year</option>
                    <option value="22-Year">22-Year</option>
                    <option value="23-Year">23-Year</option>
                    <option value="24-Year">24-Year</option>
                    <option value="25-Year" selected>25-Year</option>
                    <option value="26-Year">26-Year</option>
                    <option value="27-Year">27-Year</option>
                    <option value="28-Year">28-Year</option>
                    <option value="29-Year">29-Year</option>
                    <option value="30-Year">30-Year</option>
                </select>
            </div>
        </div>

    
        <!-- Mortgage rate row -->
        <div class="grid-container">
            <div class="row-label">Mortgage rate</div>
            <div class="grid-item">
                <input type="number" step="0.01" id="mortgage_rate1" name="mortgage_rate1" value="4.29" oninput="calculateMortgage(1)">
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="mortgage_rate2" name="mortgage_rate2" value="4.29" oninput="calculateMortgage(2)">
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="mortgage_rate3" name="mortgage_rate3" value="4.29" oninput="calculateMortgage(3)">
            </div>
            <div class="grid-item">
                <input type="number" step="0.01" id="mortgage_rate4" name="mortgage_rate4" value="4.29" oninput="calculateMortgage(4)">
            </div>
        </div>
    
        <!-- Payment frequency row -->
        <div class="grid-container">
            <div class="row-label">Payment frequency</div>
            <div class="grid-item">
                <select id="payment_frequency1" name="payment_frequency1" onchange="calculateMortgage(1)">
                    <option value="Monthly">Monthly</option>
                    <option value="Bi-weekly">Bi-weekly</option>
                    <option value="Weekly">Weekly</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="payment_frequency2" name="payment_frequency2" onchange="calculateMortgage(2)">
                    <option value="Monthly">Monthly</option>
                    <option value="Bi-weekly">Bi-weekly</option>
                    <option value="Weekly">Weekly</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="payment_frequency3" name="payment_frequency3" onchange="calculateMortgage(3)">
                    <option value="Monthly">Monthly</option>
                    <option value="Bi-weekly">Bi-weekly</option>
                    <option value="Weekly">Weekly</option>
                </select>
            </div>
            <div class="grid-item">
                <select id="payment_frequency4" name="payment_frequency4" onchange="calculateMortgage(4)">
                    <option value="Monthly">Monthly</option>
                    <option value="Bi-weekly">Bi-weekly</option>
                    <option value="Weekly">Weekly</option>
                </select>
            </div>
        </div>

        <div class="container">
    
            <!-- Mortgage payment row (highlighted) -->
            <div class="grid-container mortgage-payment-row">
                <div class="row-label">Mortgage payment</div>
                <div class="grid-item" id="result-payment1"></div>
                <div class="grid-item" id="result-payment2"></div>
                <div class="grid-item" id="result-payment3"></div>
                <div class="grid-item" id="result-payment4"></div>
            </div>
        
        </div>

    <div class="container">
        <h2 class="calculator-heading">Cash needed to close</h2>
        <div class="row">
            <div class="col-md-4">
                <p>When you purchase a house, there are a number of costs you will need to put aside in addition to your down payment.</p>
                <label for="down-payment-options">Down payment options</label>
                <select id="down-payment-options" class="form-select" onchange="updateDownPaymentOption()">
                    <option value="6.7">Scenario 1 (6.7% down)</option>
                    <option value="10">Scenario 2 (10% down)</option>
                    <option value="15">Scenario 3 (15% down)</option>
                    <option value="20">Scenario 4 (20% down)</option>
                </select>
                <div class="down-payment-options mt-4">
                    <button id="houseBtn" class="active" onclick="toggleType('house')">House</button>
                    <button id="condoBtn" onclick="toggleType('condo')">Condo</button>
                </div>
            </div>
            <div class="col-md-8">
                <div class="cash-close-section">
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="down-payment-amount">Down payment</label>
                        </div>
                        <div class="col-6 text-end">
                            <div id="down-payment-amount" class="highlight">$50,000</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="land-transfer-tax">Land transfer tax</label>
                        </div>
                        <div class="col-6 text-end">
                            <div id="land-transfer-tax" class="highlight">$22,950</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="pst-mortgage-insurance">PST on mortgage insurance</label>
                        </div>
                        <div class="col-6 text-end">
                            <div id="pst-mortgage-insurance" class="highlight">$2,240</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="lawyer-fees">Lawyer fees</label>
                        </div>
                        <div class="col-6 text-end">
                            <input type="number" id="lawyer-fees" value="1000" class="form-control cost-input" onchange="calculateCashNeeded()">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="title-insurance">Title insurance</label>
                        </div>
                        <div class="col-6 text-end">
                            <input type="number" id="title-insurance" value="900" class="form-control cost-input" onchange="calculateCashNeeded()">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="home-inspection">Home inspection</label>
                        </div>
                        <div class="col-6 text-end">
                            <input type="number" id="home-inspection" value="500" class="form-control cost-input" onchange="calculateCashNeeded()">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="appraisal-fees">Appraisal fees</label>
                        </div>
                        <div class="col-6 text-end">
                            <input type="number" id="appraisal-fees" value="300" class="form-control cost-input" onchange="calculateCashNeeded()">
                        </div>
                    </div>
                    <!-- New Estoppel Fee Row (Visible for Condo Only) -->
                    <div class="row mb-3" id="estoppel-row" style="display: none;">
                        <div class="col-6">
                            <label for="estoppel-fee">Estoppel fee</label>
                        </div>
                        <div class="col-6 text-end">
                            <input type="number" id="estoppel-fee" value="0" class="form-control cost-input" onchange="calculateCashNeeded()">
                        </div>
                    </div>
                    <div class="row total">
                        <div class="col-6">
                            Cash needed to close
                        </div>
                        <div class="col-6 text-end">
                            <span id="cash-needed">$77,890</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Monthly Expenses Section -->
    <div class="container">
        <h2 class="calculator-heading">Monthly Expenses</h2>
        <div class="row">
            <div class="col-md-4">
                <label for="down-payment-options">Down payment options</label>
                <select id="expense-down-payment-options" class="form-select" onchange="updateMonthlyExpensesScenario()">
                    <option value="1">Scenario 1 (6.7% down)</option>
                    <option value="2">Scenario 2 (10% down)</option>
                    <option value="3">Scenario 3 (15% down)</option>
                    <option value="4">Scenario 4 (20% down)</option>
                </select>
            </div>
            <div class="col-md-8">
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Mortgage payment</label>
                    </div>
                    <div class="col-6 text-end">
                        <div id="monthly-expense-mortgage-payment">$3,945</div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Property tax</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="property-tax" value="625" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Monthly debt payments</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="monthly-debt-payments" value="0" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Utilities</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="utilities" value="185" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Property insurance</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="property-insurance" value="50" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Phone</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="phone" value="60" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Cable</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="cable" value="20" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Internet</label>
                    </div>
                    <div class="col-6 text-end">
                        <input type="number" id="internet" value="60" class="form-control cost-input" onchange="calculateTotalMonthlyExpenses()">
                    </div>
                </div>
                <div class="row total">
                    <div class="col-6">
                        Monthly expenses
                    </div>
                    <div class="col-6 text-end">
                        <span id="total-monthly-expenses" class="highlight">$4,945</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Interest Rate Risk Section -->
    <div class="container">
        <h2 class="calculator-heading">Interest rate risk</h2>
        <div class="row">
            <div class="col-md-4">
                <p>When calculating your mortgage costs, it’s important to look at the long-term horizon. The mortgage rate you pay today could be substantially different from the mortgage rates available in the future.</p>
                <label for="interest-rate-down-payment-options">Down payment options</label>
                <select id="interest-rate-down-payment-options" class="form-select" onchange="updateInterestRateScenario()">
                    <option value="1">Scenario 1 (6.7% down)</option>
                    <option value="2">Scenario 2 (10% down)</option>
                    <option value="3">Scenario 3 (15% down)</option>
                    <option value="4">Scenario 4 (20% down)</option>
                </select>
            </div>
            <div class="col-md-8">
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Mortgage amount today</label>
                    </div>
                    <div class="col-6 text-end">
                        <div id="current-mortgage-amount">$494,000</div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Principal paid off over term</label>
                    </div>
                    <div class="col-6 text-end">
                        <div id="principal-paid">$61,807</div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label>Balance remaining at the end of your current term</label>
                    </div>
                    <div class="col-6 text-end">
                        <div id="balance-remaining">$432,193</div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Selected Rate</th>
                                    <th>Interest rate</th>
                                    <th>Payment</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Selected Rate</td>
                                    <td>4.29%</td>
                                    <td id="payment-4-29">$2,677</td>
                                </tr>
                                <tr>
                                    <td>Selected Rate -2%</td>
                                    <td>2.29%</td>
                                    <td id="payment-2-29">$2,244</td>
                                </tr>
                                <tr>
                                    <td>Selected Rate +2%</td>
                                    <td>6.29%</td>
                                    <td id="payment-6-29">$3,149</td>
                                </tr>
                                <tr>
                                    <td>Selected Rate +5%</td>
                                    <td>9.29%</td>
                                    <td id="payment-9-29">$3,921</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
        // Ontario Land Transfer Tax rates
        const ontarioLandTransferTaxRates = [
            { threshold: 55000, rate: 0.005 },  // 0.5% on the first $55,000
            { threshold: 195000, rate: 0.01 },  // 1.0% on the portion from $55,000 to $250,000 (250,000 - 55,000)
            { threshold: 150000, rate: 0.015 }, // 1.5% on the portion from $250,000 to $400,000 (400,000 - 250,000)
            { threshold: 1600000, rate: 0.02 }, // 2.0% on the portion from $400,000 to $2,000,000 (2,000,000 - 400,000)
            { threshold: Infinity, rate: 0.025 } // 2.5% on the portion over $2,000,000
        ];
        
        // Toronto Municipal Land Transfer Tax rates
        const torontoLandTransferTaxRates = [
            { threshold: 55000, rate: 0.005 },  // 0.5% on the first $55,000
            { threshold: 195000, rate: 0.01 },  // 1.0% on the portion from $55,000 to $250,000 (250,000 - 55,000)
            { threshold: 150000, rate: 0.015 }, // 1.5% on the portion from $250,000 to $400,000 (400,000 - 250,000)
            { threshold: 1600000, rate: 0.02 }, // 2.0% on the portion from $400,000 to $2,000,000 (2,000,000 - 400,000)
            { threshold: Infinity, rate: 0.025 } // 2.5% on the portion over $2,000,000
        ];
        
        // Function to calculate land transfer tax based on property price and tax rates
function calculateLandTransferTax(price, taxRates) {
    let tax = 0;
    let remainingPrice = price;

    for (let i = 0; i < taxRates.length; i++) {
        const { threshold, rate } = taxRates[i];

        if (remainingPrice > threshold) {
            tax += threshold * rate;
            remainingPrice -= threshold;
        } else {
            tax += remainingPrice * rate;
            break;
        }
    }

    return tax;
}

// Function to calculate total land transfer tax in Toronto (Ontario + Municipal)
function calculateTotalLandTransferTax(price) {
    const ontarioTax = calculateLandTransferTax(price, ontarioLandTransferTaxRates);
    const torontoTax = calculateLandTransferTax(price, torontoLandTransferTaxRates);
    return ontarioTax + torontoTax;
}

// Function to reset and update cost inputs when price changes
function resetCostInputs() {
    document.getElementById('lawyer-fees').value = 1000;
    document.getElementById('title-insurance').value = 900;
    document.getElementById('home-inspection').value = 500;
    document.getElementById('appraisal-fees').value = 300;
    document.getElementById('estoppel-fee').value = 0;
}

// Function to clear cash needed to close values
function clearCashNeededToClose() {
    document.getElementById('down-payment-amount').innerText = 'None';
    document.getElementById('land-transfer-tax').innerText = 'None';
    document.getElementById('pst-mortgage-insurance').innerText = 'None';
    document.getElementById('cash-needed').innerText = 'None';

    // Clear the cost input fields
    document.getElementById('lawyer-fees').value = '';
    document.getElementById('title-insurance').value = '';
    document.getElementById('home-inspection').value = '';
    document.getElementById('appraisal-fees').value = '';
    document.getElementById('estoppel-fee').value = '';
}

// Function to toggle between property types (House and Condo)
function toggleType(type) {
    document.getElementById('houseBtn').classList.remove('active');
    document.getElementById('condoBtn').classList.remove('active');

    const price = parseFloat(document.getElementById('price').value);

    if (type === 'house') {
        document.getElementById('houseBtn').classList.add('active');
        document.getElementById('estoppel-row').style.display = 'none'; // Hide Estoppel fee for House
    } else if (type === 'condo') {
        document.getElementById('condoBtn').classList.add('active');
        document.getElementById('estoppel-row').style.display = 'flex'; // Show Estoppel fee for Condo
    }

    // Update the land transfer tax dynamically based on the price
    const landTransferTax = calculateTotalLandTransferTax(price);
    document.getElementById('land-transfer-tax').innerText = `$${landTransferTax.toLocaleString()}`;

    calculateCashNeeded(); // Update the total cash needed to close
}

// Function to update down payment values in the "Cash needed to close" section
function updateDownPaymentOption() {
    const downPaymentOption = parseFloat(document.getElementById('down-payment-options').value);
    const price = parseFloat(document.getElementById('price').value);

    const downPayment = (downPaymentOption / 100) * price;
    document.getElementById('down-payment-amount').innerText = `$${downPayment.toLocaleString()}`;

    // Update PST on mortgage insurance
    if (downPaymentOption < 20) {
        const insuredMortgage = price - downPayment;
        const cmhcInsurance = (insuredMortgage * calculateInsuranceRate(downPaymentOption)) / 100;
        const pstMortgageInsurance = cmhcInsurance * 0.08; // 8% PST on mortgage insurance
        document.getElementById('pst-mortgage-insurance').innerText = `$${pstMortgageInsurance.toFixed(2)}`;
    } else {
        document.getElementById('pst-mortgage-insurance').innerText = '$0.00';
    }

    calculateCashNeeded(); // Update the total cash needed to close
    updateMonthlyExpensesScenario(); // Update the Monthly Expenses section
}

// Function to calculate CMHC Insurance rate based on down payment percentage
function calculateInsuranceRate(downPaymentPercentage) {
    if (downPaymentPercentage < 5) {
        return 0;
    } else if (downPaymentPercentage >= 5 && downPaymentPercentage < 10) {
        return 4.00;
    } else if (downPaymentPercentage >= 10 && downPaymentPercentage < 15) {
        return 3.10;
    } else if (downPaymentPercentage >= 15 && downPaymentPercentage < 20) {
        return 2.80;
    } else {
        return 0;
    }
}

// Function to update down payment values based on user input from the mortgage calculator
function updateDownPaymentValuesFromCalculator() {
    // Assuming these values come from the mortgage calculator inputs
    const dp1 = parseFloat(document.getElementById('down_payment1').value) || 0;
    const dp2 = parseFloat(document.getElementById('down_payment2').value) || 0;
    const dp3 = parseFloat(document.getElementById('down_payment3').value) || 0;
    const dp4 = parseFloat(document.getElementById('down_payment4').value) || 0;

    downPaymentValues = [dp1, dp2, dp3, dp4];

    // Update the down payment options in both sections
    updateDownPaymentOptionsFromCalculator(); // For "Cash needed to close"
    updateDownPaymentOptionsForExpenses(); // For "Monthly Expenses"
    updateInterestRateScenario(); 
}

let downPaymentValues = [6.7, 10, 15, 20]; // Default values
// Function to update down payment values globally when the user changes them in the calculator
function updateDownPaymentValues(index) {
    const price = parseFloat(document.getElementById('price').value);
    const downPaymentPercentage = parseFloat(document.getElementById(`down_payment${index}`).value);
    const errorMessage = document.getElementById(`error-message${index}`);

    if (isNaN(price) || isNaN(downPaymentPercentage)) {
        clearResult(index);
        errorMessage.innerText = 'Please enter valid down payment percentage and price.';
        return;
    }

    if (downPaymentPercentage > 100) {
        clearResult(index);
        errorMessage.innerText = 'Down payment percentage cannot exceed 100%.';
        return;
    }

    const downPayment = (downPaymentPercentage / 100) * price;
    document.getElementById(`down_payment_value${index}`).innerText = `$${Math.round(downPayment).toLocaleString()}`;


    downPaymentValues[index - 1] = downPaymentPercentage;

    // Update scenario labels immediately
    updateScenarioLabels();

    calculateMortgage(index);  // Recalculate mortgage details for the specific index
    updateInterestRateScenario(); // Recalculate interest rate risk with new down payment
}

function updateScenarioLabels() {
    downPaymentValues.forEach((value, index) => {
        const scenarioOption = document.querySelector(`#interest-rate-down-payment-options option[value="${index + 1}"]`);
        if (scenarioOption) {
            scenarioOption.textContent = `Scenario ${index + 1} (${value.toFixed(2)}% down)`;
        }
    });
}


document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('down_payment1').addEventListener('input', () => updateDownPaymentValues(1));
    document.getElementById('down_payment2').addEventListener('input', () => updateDownPaymentValues(2));
    document.getElementById('down_payment3').addEventListener('input', () => updateDownPaymentValues(3));
    document.getElementById('down_payment4').addEventListener('input', () => updateDownPaymentValues(4));
    document.getElementById('price').addEventListener('input', onMortgageCalculatorInputChange);

    // Ensure all initial calculations are performed
    updateDownPaymentValues();  // For the first column
    updateAllCalculations();
    updateScenarioLabels();   // For other general calculations
    updateDownPaymentOptionsFromCalculator();
});


// Function to calculate the total cash needed to close based on various inputs
function calculateCashNeeded() {
    const downPayment = parseFloat(document.getElementById('down-payment-amount').innerText.replace('$', '').replace(',', '')) || 0;
    const landTransferTax = parseFloat(document.getElementById('land-transfer-tax').innerText.replace('$', '').replace(',', '')) || 0;
    const pstMortgageInsurance = parseFloat(document.getElementById('pst-mortgage-insurance').innerText.replace('$', '').replace(',', '')) || 0;
    const lawyerFees = parseFloat(document.getElementById('lawyer-fees').value) || 0;
    const titleInsurance = parseFloat(document.getElementById('title-insurance').value) || 0;
    const homeInspection = parseFloat(document.getElementById('home-inspection').value) || 0;
    const appraisalFees = parseFloat(document.getElementById('appraisal-fees').value) || 0;
    const estoppelFee = parseFloat(document.getElementById('estoppel-fee').value) || 0;

    const cashNeeded = downPayment + landTransferTax + pstMortgageInsurance + lawyerFees + titleInsurance + homeInspection + appraisalFees + estoppelFee;
    document.getElementById('cash-needed').innerText = `$${Math.round(cashNeeded).toLocaleString()}`;
}


// Function to update the down payment options in the "Cash needed to close" section
function updateDownPaymentOptionsFromCalculator() {
    const downPaymentSelect = document.getElementById('down-payment-options');
    downPaymentSelect.innerHTML = '';

    downPaymentValues.forEach((value, index) => {
        const option = document.createElement('option');
        option.value = value;
        option.text = `Scenario ${index + 1} (${value.toFixed(2)}% down)`;
        downPaymentSelect.appendChild(option);
    });

    // Automatically select the first option and update the down payment scenario
    downPaymentSelect.selectedIndex = 0;
    updateDownPaymentOption();
}

function calculateMortgage(index) {
    const price = parseFloat(document.getElementById('price').value);
    const downPayment = parseFloat(document.getElementById(`down_payment_value${index}`).innerText.replace('$', '').replace(',', ''));
    const amortization = parseInt(document.getElementById(`amortization${index}`).value);
    const mortgageRate = parseFloat(document.getElementById(`mortgage_rate${index}`).value) / 100;
    const paymentFrequency = document.getElementById(`payment_frequency${index}`).value;

    if (!validateDownPayment(price, downPayment, index)) {
        clearResult(index);
        return;
    }

    const totalMortgage = price - downPayment;
    const cmhcInsurance = calculateCMHCInsurance(totalMortgage, price, downPayment);
    const insuredMortgage = totalMortgage + cmhcInsurance;

    // Calculate the mortgage payment based on the selected payment frequency
    const payment = calculatePayment(insuredMortgage, amortization, mortgageRate, paymentFrequency);

    // Calculate the monthly payment specifically for the "Monthly Expenses" section
    const monthlyPayment = calculatePayment(insuredMortgage, amortization, mortgageRate, "Monthly");

    document.getElementById(`result-cmhc${index}`).innerText = `$${Math.round(cmhcInsurance).toLocaleString()}`;

    document.getElementById(`result-total-mortgage${index}`).innerText = `$${Math.round(insuredMortgage).toLocaleString()}`;

    document.getElementById(`result-payment${index}`).innerText = `$${Math.round(payment).toLocaleString()}`;


    // Store the monthly payment in a data attribute for later use in the "Monthly Expenses" section
    document.getElementById(`result-payment${index}`).setAttribute('data-monthly-payment', Math.round(monthlyPayment));

    updateMonthlyExpensesScenario(); // Update the Monthly Expenses section
}


// Function to update the Monthly Expenses section based on the selected scenario
function updateMonthlyExpensesScenario() {
    const scenarioIndex = parseInt(document.getElementById('expense-down-payment-options').value); // Get the selected scenario index

    // Fetch the stored monthly payment for the selected scenario
    const monthlyPayment = parseFloat(document.getElementById(`result-payment${scenarioIndex}`).getAttribute('data-monthly-payment'));

    if (!isNaN(monthlyPayment)) {
        // Round the monthly payment to the nearest whole number and format with commas
        document.getElementById('monthly-expense-mortgage-payment').innerText = `$${Math.round(monthlyPayment).toLocaleString()}`;
        calculateTotalMonthlyExpenses(); // Update total monthly expenses
    }
}

// Function to validate down payment amount
function validateDownPayment(price, downPayment, index) {
    let minimumDownPayment;
    const errorMessageElement = document.getElementById(`error-message${index}`);

    if (price <= 500000) {
        // For properties <= $500,000, minimum down payment is 5%
        minimumDownPayment = 0.05 * price;
    } else if (price > 500000 && price < 1000000) {
        // For properties between $500,000 and $1,000,000, the down payment is 5% on the first $500,000 and 10% on the remaining amount
        minimumDownPayment = (0.05 * 500000) + (0.10 * (price - 500000));
    } else {
        // For properties over $1,000,000, the minimum down payment is 20%
        minimumDownPayment = 0.20 * price;
    }

    // Calculate the required down payment percentage based on the price and compare
    const minimumDownPaymentPercentage = (minimumDownPayment / price) * 100;

    if (downPayment < minimumDownPayment) {
        errorMessageElement.innerText = `The minimum down payment for a property of $${price.toLocaleString()} is ${minimumDownPaymentPercentage.toFixed(2)}%. Please increase your down payment.`;
        return false;
    } else {
        errorMessageElement.innerText = '';  // Clear error message if inputs are valid
        return true;
    }
}


function calculateCMHCInsurance(totalMortgage, price, downPayment) {
    const downPaymentPercentage = (downPayment / price) * 100;
    let insuranceRate = 0;

    if (downPaymentPercentage < 5) {
        throw new Error("Minimum down payment is 5%");
    } else if (downPaymentPercentage >= 5 && downPaymentPercentage < 10) {
        insuranceRate = 4.00;
    } else if (downPaymentPercentage >= 10 && downPaymentPercentage < 15) {
        insuranceRate = 3.10;
    } else if (downPaymentPercentage >= 15 && downPaymentPercentage < 20) {
        insuranceRate = 2.80;
    } else {
        return 0;
    }

    return (insuranceRate / 100) * totalMortgage;
}

function calculatePayment(insuredMortgage, amortization, mortgageRate, paymentFrequency) {
    let numPayments;
    let paymentRate;

    switch (paymentFrequency) {
        case "Bi-weekly":
            numPayments = amortization * 26; // 26 bi-weekly payments per year
            paymentRate = mortgageRate / 26; // Divide annual rate by 26
            break;
        case "Weekly":
            numPayments = amortization * 52; // 52 weekly payments per year
            paymentRate = mortgageRate / 52; // Divide annual rate by 52
            break;
        default:
            numPayments = amortization * 12; // 12 monthly payments per year
            paymentRate = mortgageRate / 12; // Divide annual rate by 12
    }

    // Calculate the mortgage payment using the standard formula
    return (insuredMortgage * paymentRate * Math.pow(1 + paymentRate, numPayments)) /
           (Math.pow(1 + paymentRate, numPayments) - 1);
}

// Function to update the Interest Rate Risk section dynamically
let scenariosData = {
    1: { amortization: 25, interestRate: 4.29, mortgageAmount: 0, principalPaid: 0, balanceRemaining: 0 },
    2: { amortization: 25, interestRate: 4.29, mortgageAmount: 0, principalPaid: 0, balanceRemaining: 0 },
    3: { amortization: 25, interestRate: 4.29, mortgageAmount: 0, principalPaid: 0, balanceRemaining: 0 },
    4: { amortization: 25, interestRate: 4.29, mortgageAmount: 0, principalPaid: 0, balanceRemaining: 0 }
};

function updateInterestRateScenario() {
    const price = parseFloat(document.getElementById('price').value);
    const selectedScenario = parseInt(document.getElementById('interest-rate-down-payment-options').value);

    const downPaymentPercentage = downPaymentValues[selectedScenario - 1];
    if (isNaN(price) || isNaN(downPaymentPercentage)) {
        clearInterestRateRiskSection(); // Clear the section if inputs are invalid
        return;
    }

    const downPayment = (downPaymentPercentage / 100) * price;
    const totalMortgage = price - downPayment + calculateCMHCInsurance(price - downPayment, price, downPayment);

    document.querySelector(`#interest-rate-down-payment-options option[value="${selectedScenario}"]`).textContent =
        `Scenario ${selectedScenario} (${downPaymentPercentage.toFixed(2)}% down)`;

    scenariosData[selectedScenario].mortgageAmount = totalMortgage;

    document.getElementById('current-mortgage-amount').innerText = `$${Math.round(totalMortgage).toLocaleString()}`;

    const amortizationYears = parseInt(document.getElementById(`amortization${selectedScenario}`).value);
    const interestRate = parseFloat(document.getElementById(`mortgage_rate${selectedScenario}`).value) / 100;

    scenariosData[selectedScenario].amortization = amortizationYears;
    scenariosData[selectedScenario].interestRate = interestRate;

    const principalPaid = calculatePrincipalPaid(totalMortgage, interestRate, 5, amortizationYears);
    const balanceRemaining = totalMortgage - principalPaid;

    scenariosData[selectedScenario].principalPaid = principalPaid;
    scenariosData[selectedScenario].balanceRemaining = balanceRemaining;

    document.getElementById('principal-paid').innerText = `$${Math.round(principalPaid).toLocaleString()}`;
    document.getElementById('balance-remaining').innerText = `$${Math.round(balanceRemaining).toLocaleString()}`;

    updateInterestPayments(Math.round(balanceRemaining));
}



function clearInterestRateRiskSection() {
    document.getElementById('current-mortgage-amount').innerText = "$0";
    document.getElementById('principal-paid').innerText = "$0";
    document.getElementById('balance-remaining').innerText = "$0";
}


// Ensure updateInterestRateScenario is called whenever inputs change
function attachEventListeners() {
    document.querySelectorAll('#amortization1, #amortization2, #amortization3, #amortization4, #mortgage_rate1, #mortgage_rate2, #mortgage_rate3, #mortgage_rate4').forEach(input => {
        input.addEventListener('input', updateInterestRateScenario);
    });
}

    // Ensure that changing scenarios also triggers the recalculation
    document.getElementById('interest-rate-down-payment-options').addEventListener('change', updateInterestRateScenario);
document.querySelectorAll('.amortization-input, .interest-rate-input').forEach(input => {
    input.addEventListener('input', updateInterestRateScenario);
});

document.addEventListener("DOMContentLoaded", function() {
    attachEventListeners();
    updateInterestRateScenario();
    updateAllCalculations(); // Ensure all values are initially calculated on page load
});

function calculatePrincipalPaid(mortgageAmount, annualInterestRate, termYears, amortizationYears) {
    // Calculate monthly interest rate
    const monthlyInterestRate = Math.pow(1 + (annualInterestRate / 200), 2) - 1;
    const monthlyInterestRateAdjusted = Math.pow(1 + monthlyInterestRate, 1 / 12) - 1;

    const totalPayments = amortizationYears * 12;
    const termPayments = termYears * 12;

    const monthlyPayment = (mortgageAmount * monthlyInterestRateAdjusted) /
        (1 - Math.pow(1 + monthlyInterestRateAdjusted, -totalPayments));

    let principalPaid = 0;
    let balance = mortgageAmount;

    for (let i = 0; i < termPayments; i++) {
        const interestPayment = balance * monthlyInterestRateAdjusted;
        const principalPayment = monthlyPayment - interestPayment;
        principalPaid += principalPayment;
        balance -= principalPayment;

        if (balance < 0) {
            principalPaid += balance;
            break;
        }
    }

    return principalPaid;
}


function calculateBalanceRemaining(mortgageAmount, principalPaid) {
    const balanceRemaining = mortgageAmount - principalPaid;

    // Ensure balance remaining is never negative
    return balanceRemaining > 0 ? balanceRemaining : 0;
}

// Function to update payments based on different interest rates
function updateInterestPayments(balanceRemaining) {
    const rates = [4.29, 2.29, 6.29, 9.29];

    rates.forEach(rate => {
        const payment = calculatePayment(balanceRemaining, 25, rate / 100, 'Monthly');
        document.getElementById(`payment-${rate.toFixed(2).replace('.', '-')}`).innerText = `$${Math.round(payment).toLocaleString()}`;
    });
}


// Function to update down payment values in the "Monthly Expenses" section
function updateDownPaymentOptionsForExpenses() {
    const downPaymentSelect = document.getElementById('expense-down-payment-options');
    downPaymentSelect.innerHTML = ''; // Clear existing options

    downPaymentValues.forEach((value, index) => {
        const option = document.createElement('option');
        option.value = index + 1; // Use index + 1 to match the scenario numbering
        option.text = `Scenario ${index + 1} (${value.toFixed(2)}% down)`;
        downPaymentSelect.appendChild(option);
    });

    downPaymentSelect.selectedIndex = 0; // Automatically select the first option
    updateMonthlyExpensesScenario(); // Update the Monthly Expenses section
}

// Function to calculate total monthly expenses
function calculateTotalMonthlyExpenses() {
    const mortgagePayment = parseFloat(document.getElementById('monthly-expense-mortgage-payment').innerText.replace('$', '').replace(',', '')) || 0;
    const propertyTax = parseFloat(document.getElementById('property-tax').value) || 0;
    const monthlyDebtPayments = parseFloat(document.getElementById('monthly-debt-payments').value) || 0;
    const utilities = parseFloat(document.getElementById('utilities').value) || 0;
    const propertyInsurance = parseFloat(document.getElementById('property-insurance').value) || 0;
    const phone = parseFloat(document.getElementById('phone').value) || 0;
    const cable = parseFloat(document.getElementById('cable').value) || 0;
    const internet = parseFloat(document.getElementById('internet').value) || 0;

    const totalMonthlyExpenses = mortgagePayment + propertyTax + monthlyDebtPayments + utilities + propertyInsurance + phone + cable + internet;
    document.getElementById('total-monthly-expenses').innerText = `$${Math.round(totalMonthlyExpenses).toLocaleString()}`;

}

// Function to clear results in the calculator
function clearResults() {
    for (let i = 1; i <= 4; i++) {
        clearResult(i);
    }
}

// Function to clear individual results
function clearResult(index) {
    document.getElementById(`result-cmhc${index}`).innerText = '$0.00';
    document.getElementById(`result-total-mortgage${index}`).innerText = '$0.00';
    document.getElementById(`result-payment${index}`).innerText = '$0.00';
}

// Attach `oninput` event listeners to update calculations as the user types
document.querySelectorAll('.mortgage-input').forEach(input => {
    input.addEventListener('input', updateInterestRateScenario);
});



function updateAllCalculations() {
    updateDownPayments();
    updateDownPaymentOption();
    calculateCashNeeded();
    updateInterestRateScenario();
}


// Attach event listeners for real-time updates in Monthly Expenses section
document.getElementById('property-tax').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('monthly-debt-payments').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('utilities').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('property-insurance').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('phone').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('cable').addEventListener('input', calculateTotalMonthlyExpenses);
document.getElementById('internet').addEventListener('input', calculateTotalMonthlyExpenses);

// Function to be called whenever the down payment inputs change in the mortgage calculator
function onMortgageCalculatorInputChange() {
    updateDownPaymentValuesFromCalculator();
}

// Update down payment values based on user input from the mortgage calculator
function updateDownPayments() {
    const price = parseFloat(document.getElementById('price').value);
    const errorMessagePrice = document.getElementById('error-message-price');

    if (isNaN(price) || price === 0) {
        clearResults();
        clearCashNeededToClose(); // Clear the "Cash needed to close" values
        errorMessagePrice.innerText = 'Please enter a valid price.';
        return;
    }

    errorMessagePrice.innerText = ''; // Clear the error message if the price is valid

    resetCostInputs(); // Reset all cost inputs

    // Update Down Payment Values
    updateDownPaymentValues(1);
    updateDownPaymentValues(2);
    updateDownPaymentValues(3);
    updateDownPaymentValues(4);

    // Update the sections that rely on down payment values
    updateDownPaymentOptionsFromCalculator();
    updateDownPaymentOption();
    updateInterestRateScenario();

    const landTransferTax = calculateTotalLandTransferTax(price);
    document.getElementById('land-transfer-tax').innerText = `$${landTransferTax.toLocaleString()}`;

    calculateCashNeeded(); // Update the total cash needed to close
}

// Attach `oninput` event listeners to update down payments
document.querySelectorAll('.input-group input').forEach(input => {
    input.addEventListener('input', onMortgageCalculatorInputChange);
});

// Initial setup
updateDownPaymentOptionsFromCalculator();
updateAllCalculations();

// Attach `oninput` event listeners to update calculations as the user types
document.querySelectorAll('.mortgage-input, #interest-rate-down-payment-options').forEach(input => {
    input.addEventListener('input', updateInterestRateScenario);
});


// Attach `oninput` event listeners to update calculations as the user types
document.querySelectorAll('.cost-input').forEach(input => {
    input.addEventListener('input', calculateCashNeeded);
});

        </script>
</body>
</html>